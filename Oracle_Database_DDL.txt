-- 테이블 순서는 관계를 고려하여 한 번에 실행해도 에러가 발생하지 않게 정렬되었습니다.
-- DDL 구문을 전체 선택하고 실행하세요.
-- 테이블을 삭제할 땐, 관계를 먼저 제거해야 합니다.

--○ 테이블 삭제 전 관계 제거
/*
ALTER TABLE MIS_CAT DROP CONSTRAINT MC_MIS_LOCATION_FK;
ALTER TABLE ADT_REG DROP CONSTRAINT AD_CAT_ADDRESS_FK;
ALTER TABLE CAT DROP CONSTRAINT CAT_ADDRESS_FK;
ALTER TABLE USER_REG DROP CONSTRAINT US_ADDRESS_CODE_FK;
ALTER TABLE USER_REG DROP CONSTRAINT US_GRADE_CODE_FK;
ALTER TABLE ACT_CMT DROP CONSTRAINT ACC_USER_CODE_FK;
ALTER TABLE ACT_LIKE DROP CONSTRAINT AC_USER_CODE_FK;
ALTER TABLE ADT_APPLY DROP CONSTRAINT AA_USER_CODE_FK;
ALTER TABLE SEND_MESSAGES DROP CONSTRAINT MS_USER_CODE1_FK;
ALTER TABLE SEND_MESSAGES DROP CONSTRAINT MS_USER_CODE2_FK;
ALTER TABLE MERGE_VOTE DROP CONSTRAINT MV_USER_CODE_FK;
ALTER TABLE GAL_LIKE DROP CONSTRAINT GL_USER_CODE_FK;
ALTER TABLE BBS_LIKE DROP CONSTRAINT BL_USER_CODE_FK;
ALTER TABLE BBS_CMT DROP CONSTRAINT BC_USER_CODE_FK;
ALTER TABLE EMAIL_INQUIRY DROP CONSTRAINT EI_USER_CODE_FK;
ALTER TABLE FOLLOW DROP CONSTRAINT FO_USER_CODE_FK;
ALTER TABLE REPORT_LIST DROP CONSTRAINT RL_USER_CODE_FK;
ALTER TABLE MERGE_REQUEST DROP CONSTRAINT MR_USER_CODE_FK;
ALTER TABLE MIS_CAT DROP CONSTRAINT MC_USER_CODE_FK;
ALTER TABLE ADT_REG DROP CONSTRAINT AD_USER_CODE_FK;
ALTER TABLE BBS_REG DROP CONSTRAINT BR_USER_CODE_FK;
ALTER TABLE ACT_REG DROP CONSTRAINT AR_USER_CODE_FK;
ALTER TABLE CAT DROP CONSTRAINT CAT_USER_CODE_FK;
ALTER TABLE ADT_LIKE DROP CONSTRAINT AL_USER_CODE_FK;
ALTER TABLE BOOKMARK DROP CONSTRAINT BM_USER_CODE_FK;
ALTER TABLE MIS_CMT DROP CONSTRAINT MCT_USER_CODE_FK;
ALTER TABLE SCORE_LOG DROP CONSTRAINT SL_USER_CODE_FK;
ALTER TABLE CAPT_LOG DROP CONSTRAINT CL_USER_CODE_FK;
ALTER TABLE ADT_CMT DROP CONSTRAINT ADC_USER_CODE_FK;
ALTER TABLE ADT_APPLY DROP CONSTRAINT AA_ADT_ABANDON_FK;
ALTER TABLE ADT_APPLY DROP CONSTRAINT AA_ADT_ADAPTION_FK;
ALTER TABLE ADT_APPLY DROP CONSTRAINT AA_ADT_ALLOW_FK;
ALTER TABLE ADT_APPLY DROP CONSTRAINT AA_ADT_MARRIAGE_FK;
ALTER TABLE ADT_APPLY DROP CONSTRAINT AA_ADT_CAT_EXP_FK;
ALTER TABLE ADT_APPLY DROP CONSTRAINT AA_ADT_ALLERGY_FK;
ALTER TABLE MERGE_VOTE DROP CONSTRAINT MV_YESNO_FK;
ALTER TABLE MERGE_ANSWER DROP CONSTRAINT MA_YESNO_FK;
ALTER TABLE MERGE_RESULT DROP CONSTRAINT MS_YESNO_FK;
ALTER TABLE CAPT_LOG DROP CONSTRAINT CL_RES_CODE_FK;
ALTER TABLE MIS_CAT DROP CONSTRAINT MC_CAT_SPECIES_FK;
ALTER TABLE ADT_REG DROP CONSTRAINT AD_CAT_SPECIES_FK;
ALTER TABLE CAT DROP CONSTRAINT CAT_SPECIES_FK;
ALTER TABLE MIS_CAT DROP CONSTRAINT MC_CAT_SEX_FK;
ALTER TABLE ADT_REG DROP CONSTRAINT AD_CAT_SEX_FK;
ALTER TABLE CAT DROP CONSTRAINT CAT_SEX_FK;
ALTER TABLE CAT DROP CONSTRAINT CAT_STATUS_FK;
ALTER TABLE FOLLOW DROP CONSTRAINT FO_CAT_CODE_FK;
ALTER TABLE GAL_REG DROP CONSTRAINT GA_CAT_CODE_FK;
ALTER TABLE MERGE_REQUEST DROP CONSTRAINT MR_CAT_CODE1_FK;
ALTER TABLE MERGE_REQUEST DROP CONSTRAINT MR_CAT_CODE2_FK;
ALTER TABLE CAPT DROP CONSTRAINT CP_CAT_CODE_FK;
ALTER TABLE CAPT DROP CONSTRAINT CP_CAT_CODE2_FK;
ALTER TABLE ACT_REG DROP CONSTRAINT AR_CAT_CODE_FK;
ALTER TABLE BOOKMARK DROP CONSTRAINT BM_CAT_CODE_FK;
ALTER TABLE MIS_CAT DROP CONSTRAINT MC_CAT_AGE_CODE_FK;
ALTER TABLE ADT_REG DROP CONSTRAINT AD_CAT_AGE_CODE_FK;
ALTER TABLE ADT_REG DROP CONSTRAINT AD_ADT_PROC_CODE_FK;
ALTER TABLE ADT_APPLY DROP CONSTRAINT AA_ADT_JOB_FK;
ALTER TABLE ADT_REG DROP CONSTRAINT AD_ADT_JOB_FK;
ALTER TABLE ADT_APPLY DROP CONSTRAINT AA_ADT_FAMILY_NUM_FK;
ALTER TABLE ADT_REG DROP CONSTRAINT AD_ADT_FAMILY_NUM_FK;
ALTER TABLE ACT_REG DROP CONSTRAINT AR_ACT_TYPE_FK;
ALTER TABLE BBS_REG DROP CONSTRAINT BR_TYPE_CODE_FK;
ALTER TABLE ACT_CMT DROP CONSTRAINT ACC_ACT_CODE_FK;
ALTER TABLE ACT_LIKE DROP CONSTRAINT AC_ACT_CODE_FK;
ALTER TABLE ACT_IMG DROP CONSTRAINT AI_ACT_CODE_FK;
ALTER TABLE BBS_LIKE DROP CONSTRAINT BL_BBS_CODE_FK;
ALTER TABLE BBS_CMT DROP CONSTRAINT BC_BBS_CODE_FK;
ALTER TABLE BBS_IMG DROP CONSTRAINT BI_BBS_CODE_FK;
ALTER TABLE ADT_APPLY DROP CONSTRAINT AA_ADT_CODE_FK;
ALTER TABLE ADT_IMG DROP CONSTRAINT AI_ADT_CODE_FK;
ALTER TABLE QNS_LIST DROP CONSTRAINT QL_ADT_CODE_FK;
ALTER TABLE CAPT_FINISH DROP CONSTRAINT CF_CAPT_CODE_FK;
ALTER TABLE CAPT_LOG DROP CONSTRAINT CL_CAPT_CODE_FK;
ALTER TABLE MIS_CMT DROP CONSTRAINT MCT_MIS_CODE_FK;
ALTER TABLE MIS_IMG DROP CONSTRAINT MI_MIS_CODE_FK;
ALTER TABLE MERGE_ANSWER DROP CONSTRAINT MA_REQ_CODE_FK;
ALTER TABLE MERGE_RESULT DROP CONSTRAINT MS_REQ_CODE_FK;
ALTER TABLE REPORT_LIST DROP CONSTRAINT RL_BOARD_CODE_FK;
ALTER TABLE SCORE_ALLOT DROP CONSTRAINT SA_BOARD_CODE_FK;
ALTER TABLE SCORE_ALLOT DROP CONSTRAINT SA_ACT_CODE_FK;
ALTER TABLE GAL_LIKE DROP CONSTRAINT GL_GAL_IMG_CODE_FK;
ALTER TABLE REPORT_LIST DROP CONSTRAINT RL_REPORT_TYPE_CODE_FK;
ALTER TABLE ADT_APPLY DROP CONSTRAINT AA_ADT_GENDER_FK;
ALTER TABLE ADT_APPLY DROP CONSTRAINT AA_ADT_RESIDENCE_FK;
ALTER TABLE ADT_APPLY DROP CONSTRAINT AA_ADT_FAMILY_FK;
ALTER TABLE ADT_APPLY DROP CONSTRAINT AA_ADT_PET_NUM_FK;
ALTER TABLE ADT_APPLY DROP CONSTRAINT AA_ADT_CARE_TIME_FK;
ALTER TABLE MERGE_VOTE DROP CONSTRAINT MV_ANS_CODE_FK;
ALTER TABLE SCORE_LOG DROP CONSTRAINT SL_SCORE_CODE_FK;
ALTER TABLE ADT_APPLY DROP CONSTRAINT AA_ADT_AGE_FK;


--○ 테이블 삭제
DROP TABLE REPORT_LIST PURGE;
DROP TABLE FOLLOW PURGE;
DROP TABLE EMAIL_INQUIRY PURGE;
DROP TABLE BBS_CMT PURGE;
DROP TABLE BBS_LIKE PURGE;
DROP TABLE GAL_LIKE PURGE;
DROP TABLE MERGE_VOTE PURGE;
DROP TABLE SEND_MESSAGES PURGE;
DROP TABLE CAPT_FINISH PURGE;
DROP TABLE ADT_APPLY PURGE;
DROP TABLE ADT_TYPE PURGE;
DROP TABLE ACT_LIKE PURGE;
DROP TABLE ACT_CMT PURGE;
DROP TABLE MIS_IMG PURGE;
DROP TABLE ADT_CMT PURGE;
DROP TABLE CAPT_LOG PURGE;
DROP TABLE MERGE_RESULT PURGE;
DROP TABLE SCORE_LOG PURGE;
DROP TABLE ACT_IMG PURGE;
DROP TABLE QNS_LIST PURGE;
DROP TABLE BBS_IMG PURGE;
DROP TABLE MIS_CMT PURGE;
DROP TABLE BOOKMARK PURGE;
DROP TABLE ADT_IMG PURGE;
DROP TABLE CAT_TYPE PURGE;
DROP TABLE CAT_SEX PURGE;
DROP TABLE CAT_STATUS PURGE;
DROP TABLE CAT PURGE;
DROP TABLE RESPONSE_TYPE PURGE;
DROP TABLE ADT_LIKE PURGE;
DROP TABLE ADT_CAT_AGE PURGE;
DROP TABLE ADT_PROCESS PURGE;
DROP TABLE ADT_JOB PURGE;
DROP TABLE ADT_FAMILY_NUM PURGE;
DROP TABLE ACT_TYPE PURGE;
DROP TABLE BBS_TYPE PURGE;
DROP TABLE CAPT PURGE;
DROP TABLE MIS_CAT PURGE;
DROP TABLE MERGE_REQUEST PURGE;
DROP TABLE BOARD_TYPE PURGE;
DROP TABLE USER_ACT_TYPE PURGE;
DROP TABLE REPORT_TYPE PURGE;
DROP TABLE ADT_GENDER PURGE;
DROP TABLE ADT_RESIDENCE PURGE;
DROP TABLE ADT_CONSENT PURGE;
DROP TABLE ADT_PET_NUM PURGE;
DROP TABLE ADT_CARE_TIME PURGE;
DROP TABLE MERGE_ANSWER PURGE;
DROP TABLE SCORE_ALLOT PURGE;
DROP TABLE ADT_AGE PURGE;
DROP TABLE GAL_REG PURGE;
DROP TABLE ACT_REG PURGE;
DROP TABLE BBS_REG PURGE;
DROP TABLE ADT_REG PURGE;
DROP TABLE USER_REG PURGE;
DROP TABLE USER_GRADE PURGE;
DROP TABLE ADDRESS PURGE;
*/

--테이블 생성 구문-----------------------------------------------------------------------------------------------------------

-- ADDRESS Table Create SQL
CREATE TABLE ADDRESS
( ADDRESS_CODE    VARCHAR2(100)     
, SI              VARCHAR2(100)    
, GU              VARCHAR2(100)     
, DONG            VARCHAR2(100)     
, CONSTRAINT ADDRESS_CODE_PK PRIMARY KEY (ADDRESS_CODE)
);
COMMENT ON TABLE ADDRESS IS '범례';
COMMENT ON COLUMN ADDRESS.ADDRESS_CODE IS '시퀀스';
COMMENT ON COLUMN ADDRESS.SI IS '시';
COMMENT ON COLUMN ADDRESS.GU IS '구';
COMMENT ON COLUMN ADDRESS.DONG IS '동';


-- USER_GRADE Table Create SQL
CREATE TABLE USER_GRADE
( GRADE_CODE    VARCHAR2(100)
, GRADE_NAME    VARCHAR2(100)
, MIN_SCORE     NUMBER  
, CONSTRAINT GR_GRADE_CODE_PK PRIMARY KEY (GRADE_CODE)
);
COMMENT ON TABLE USER_GRADE IS '범례(회원등급 4단계 - 준회원초보집사열혈집사최고집사)';
COMMENT ON COLUMN USER_GRADE.GRADE_CODE IS '시퀀스';
COMMENT ON COLUMN USER_GRADE.GRADE_NAME IS '준회원초보집사열혈집사최고집사';
COMMENT ON COLUMN USER_GRADE.MIN_SCORE IS '등급 최소 기준치';

-- USER_REG Table Create SQL
CREATE TABLE USER_REG
( USER_CODE       VARCHAR2(100)
, ID              VARCHAR2(100)
, USER_NAME       VARCHAR2(100)
, PWD             VARCHAR2(100)
, TEL             VARCHAR2(100)
, EMAIL           VARCHAR2(100)
, GRADE           VARCHAR2(100)
, NICKNAME        VARCHAR2(100)
, ADDRESS_CODE    VARCHAR2(100)
, JOIN_DATE       DATE         DEFAULT SYSDATE
, USER_STATUS	  VARCHAR2(100)
, CONSTRAINT US_USER_CODE_PK PRIMARY KEY (USER_CODE)
, CONSTRAINT US_GRADE_CODE_FK FOREIGN KEY (GRADE) REFERENCES USER_GRADE (GRADE_CODE)
, CONSTRAINT US_ADDRESS_CODE_FK FOREIGN KEY (ADDRESS_CODE) REFERENCES ADDRESS (ADDRESS_CODE)
);
COMMENT ON TABLE USER_REG IS '이용자(회원가입)';
COMMENT ON COLUMN USER_REG.USER_CODE IS '시퀀스';
COMMENT ON COLUMN USER_REG.ID IS '이용자 계정';
COMMENT ON COLUMN USER_REG.USER_NAME IS '이름';
COMMENT ON COLUMN USER_REG.PWD IS '비밀번호';
COMMENT ON COLUMN USER_REG.TEL IS '전화번호';
COMMENT ON COLUMN USER_REG.EMAIL IS '이메일';
COMMENT ON COLUMN USER_REG.GRADE IS '회원 등급 식별키';
COMMENT ON COLUMN USER_REG.NICKNAME IS '닉네임';
COMMENT ON COLUMN USER_REG.ADDRESS_CODE IS '주소';
COMMENT ON COLUMN USER_REG.JOIN_DATE IS '가입일자';


-- RESPONSE_TYPE Table Create SQL
CREATE TABLE RESPONSE_TYPE
( YESNO       VARCHAR2(100)
, RES_TYPE    VARCHAR2(100)
, CONSTRAINT RES_YESNO_PK PRIMARY KEY (YESNO)
);
COMMENT ON TABLE RESPONSE_TYPE IS '긍정  부정  상관없음(모름) 응답 유형';
COMMENT ON COLUMN RESPONSE_TYPE.YESNO IS 'Y  N';
COMMENT ON COLUMN RESPONSE_TYPE.RES_TYPE IS '긍정, 부정, 모름(상관없음)';


-- CAT_TYPE Table Create SQL
CREATE TABLE CAT_TYPE
( SPECIES_CODE    VARCHAR2(100)
, SPECIES         VARCHAR2(100)
, SPECIES_IMG     VARCHAR2(100)
, CONSTRAINT CT_SPECIES_CODE_PK PRIMARY KEY (SPECIES_CODE)
);
COMMENT ON TABLE CAT_TYPE IS '범례';
COMMENT ON COLUMN CAT_TYPE.SPECIES_CODE IS '시퀀스';
COMMENT ON COLUMN CAT_TYPE.SPECIES IS '코숏(고등어,치즈,삼색,카오스,턱시도,젖소)  품종(샴,러시안블루,페르시안,스코티쉬,..등)  기타';
COMMENT ON COLUMN CAT_TYPE.SPECIES_IMG IS '종류 이미지';


-- CAT_SEX Table Create SQL
CREATE TABLE CAT_SEX
( SEX_CODE    VARCHAR2(100)
, SEX         VARCHAR2(100)
, CONSTRAINT SEX_CODE_PK PRIMARY KEY (SEX_CODE)
);
COMMENT ON TABLE CAT_SEX IS '범례(성별-암컷수컷모름)';
COMMENT ON COLUMN CAT_SEX.SEX_CODE IS '시퀀스';
COMMENT ON COLUMN CAT_SEX.SEX IS '암, 수, 모름';



-- CAT_STATUS Table Create SQL
CREATE TABLE CAT_STATUS
( STATUS_CODE    VARCHAR2(100)
, STATUS         VARCHAR2(100)
, CONSTRAINT STATUS_CODE_PK PRIMARY KEY (STATUS_CODE)
);
COMMENT ON TABLE CAT_STATUS IS '범례(고양이상태- 관리통합사망)';
COMMENT ON COLUMN CAT_STATUS.STATUS_CODE IS '시퀀스';
COMMENT ON COLUMN CAT_STATUS.STATUS IS '관리통합사망';



-- ADT_LIKE Table Create SQL
CREATE TABLE ADT_LIKE
( ADT_LIKE_CODE    VARCHAR2(100)
, ADT_CODE         VARCHAR2(100)
, USER_CODE        VARCHAR2(100)
, ADT_LIKE_DATE    DATE         DEFAULT SYSDATE
, CONSTRAINT ADT_LIKE_CODE_PK PRIMARY KEY (ADT_LIKE_CODE)
, CONSTRAINT AL_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
);
COMMENT ON TABLE ADT_LIKE IS '입양 모집글 좋아요';
COMMENT ON COLUMN ADT_LIKE.ADT_LIKE_CODE IS '좋아요 식별키';
COMMENT ON COLUMN ADT_LIKE.ADT_CODE IS '입양모집글 식별키';
COMMENT ON COLUMN ADT_LIKE.USER_CODE IS '이용자 식별키';
COMMENT ON COLUMN ADT_LIKE.ADT_LIKE_DATE IS '좋아요 일시';


-- CAT Table Create SQL
CREATE TABLE CAT
( CAT_CODE       VARCHAR2(100)
, CAT_NAME       VARCHAR2(100)
, CAT_ADDRESS    VARCHAR2(100)
, CAT_SPECIES    VARCHAR2(100)
, CAT_SEX        VARCHAR2(100)
, CAT_ECT1       VARCHAR2(100)
, CAT_ECT2       VARCHAR2(100)
, CAT_STATUS     VARCHAR2(100)
, CAT_REP_IMG    VARCHAR2(100)
, CAT_DATE       DATE       DEFAULT SYSDATE       
, USER_CODE      VARCHAR2(100)
, CONSTRAINT CAT_CODE_PK PRIMARY KEY (CAT_CODE)
, CONSTRAINT CAT_SPECIES_FK FOREIGN KEY (CAT_SPECIES) REFERENCES CAT_TYPE (SPECIES_CODE)
, CONSTRAINT CAT_STATUS_FK FOREIGN KEY (CAT_STATUS) REFERENCES CAT_STATUS (STATUS_CODE)
, CONSTRAINT CAT_ADDRESS_FK FOREIGN KEY (CAT_ADDRESS) REFERENCES ADDRESS (ADDRESS_CODE)
, CONSTRAINT CAT_SEX_FK FOREIGN KEY (CAT_SEX) REFERENCES CAT_SEX (SEX_CODE)
, CONSTRAINT CAT_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
);
COMMENT ON TABLE CAT IS '고양이 기본 등록';
COMMENT ON COLUMN CAT.CAT_CODE IS '시퀀스';
COMMENT ON COLUMN CAT.CAT_NAME IS '고양이 이름';
COMMENT ON COLUMN CAT.CAT_ADDRESS IS '주 활동 지역';
COMMENT ON COLUMN CAT.CAT_SPECIES IS '고양이 품종, 무늬 등의 정보';
COMMENT ON COLUMN CAT.CAT_SEX IS '성별';
COMMENT ON COLUMN CAT.CAT_ECT1 IS '고양이의 기타 특징';
COMMENT ON COLUMN CAT.CAT_ECT2 IS '텍스트';
COMMENT ON COLUMN CAT.CAT_STATUS IS '사망, 입양, 실종 등의 상태표시';
COMMENT ON COLUMN CAT.CAT_REP_IMG IS '대표 이미지';
COMMENT ON COLUMN CAT.CAT_DATE IS '등록일';
COMMENT ON COLUMN CAT.USER_CODE IS '이용자 식별키';


-- ADT_CAT_AGE Table Create SQL
CREATE TABLE ADT_CAT_AGE
( CAT_AGE_CODE    VARCHAR2(100)
, CAT_AGE_TYPE    VARCHAR2(100)
, CONSTRAINT ADT_CAT_AGE_CODE_PK PRIMARY KEY (CAT_AGE_CODE)
);
COMMENT ON TABLE ADT_CAT_AGE IS '성묘아기묘';
COMMENT ON COLUMN ADT_CAT_AGE.CAT_AGE_CODE IS '시리얼';
COMMENT ON COLUMN ADT_CAT_AGE.CAT_AGE_TYPE IS '성묘, 아기묘';


-- ADT_PROCESS Table Create SQL
CREATE TABLE ADT_PROCESS
( ADT_PROC_CODE    VARCHAR2(100)
, ADT_PROC         VARCHAR2(100)
, CONSTRAINT ADT_PROC_CODE_PK PRIMARY KEY (ADT_PROC_CODE)
);
COMMENT ON TABLE ADT_PROCESS IS '입양 상태 분류';
COMMENT ON COLUMN ADT_PROCESS.ADT_PROC_CODE IS '시퀀스';
COMMENT ON COLUMN ADT_PROCESS.ADT_PROC IS '진행, 보류, 확정 등';


-- ADT_JOB Table Create SQL
CREATE TABLE ADT_JOB
( ADT_JOB    VARCHAR2(100)
, ANSWER     VARCHAR2(100)
, CONSTRAINT ADT_JOB__CODE_PK PRIMARY KEY (ADT_JOB)
);
COMMENT ON TABLE ADT_JOB IS '직업 구분';
COMMENT ON COLUMN ADT_JOB.ADT_JOB IS '시퀀스';
COMMENT ON COLUMN ADT_JOB.ANSWER IS '상관없음, 학생, 직장인, 기타';


-- ADT_FAMILY_NUM Table Create SQL
CREATE TABLE ADT_FAMILY_NUM
( ADT_FAMILY_NUM    VARCHAR2(100)
, ANSWER            VARCHAR2(100)
, CONSTRAINT ADT_FAMILY_NUM_PK PRIMARY KEY (ADT_FAMILY_NUM)
);
COMMENT ON TABLE ADT_FAMILY_NUM IS '가족 구성원 수';
COMMENT ON COLUMN ADT_FAMILY_NUM.ADT_FAMILY_NUM IS '시퀀스';
COMMENT ON COLUMN ADT_FAMILY_NUM.ANSWER IS '상관없음, 1명, 2명, 3명 이상';


-- ACT_TYPE Table Create SQL
CREATE TABLE ACT_TYPE
( ACT_TYPE_CODE    VARCHAR2(100)
, ACT_TYPE         VARCHAR2(100)
, CONSTRAINT ACT_TYPE_CODE_PK PRIMARY KEY (ACT_TYPE_CODE)
);
COMMENT ON TABLE ACT_TYPE IS '범례(고양이활동구분 - 먹이,물,간식,약,만남)';
COMMENT ON COLUMN ACT_TYPE.ACT_TYPE_CODE IS '시퀀스';
COMMENT ON COLUMN ACT_TYPE.ACT_TYPE IS '먹이,물,간식,약,만남';


-- BBS_TYPE Table Create SQL
CREATE TABLE BBS_TYPE
( BBS_TYPE_CODE    VARCHAR2(100)
, BBS_TYPE         VARCHAR2(100)
, CONSTRAINT BBS_TYPE_CODE_PK PRIMARY KEY (BBS_TYPE_CODE)
);
COMMENT ON TABLE BBS_TYPE IS '범례 (잡담질문일기)';
COMMENT ON COLUMN BBS_TYPE.BBS_TYPE_CODE IS '시리얼';
COMMENT ON COLUMN BBS_TYPE.BBS_TYPE IS '잡담, 질문, 일기';


-- ACT_REG Table Create SQL
CREATE TABLE ACT_REG
( ACT_CODE     VARCHAR2(100)
, CAT_CODE     VARCHAR2(100)
, USER_CODE    VARCHAR2(100)
, ACT_TYPE     VARCHAR2(100)
, CONTENT      VARCHAR2(100)
, POST_DATE    DATE         DEFAULT SYSDATE
, LATITUDE     VARCHAR2(100)
, LONGITUDE    VARCHAR2(100)
, ACT_LOCATION     VARCHAR2(100)
, ACT_DATE     DATE         
, ACT_IMG       VARCHAR2(100)
, CONSTRAINT ACT_CODE_PK PRIMARY KEY (ACT_CODE)
, CONSTRAINT AR_ACT_TYPE_FK FOREIGN KEY (ACT_TYPE) REFERENCES ACT_TYPE (ACT_TYPE_CODE)
, CONSTRAINT AR_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
, CONSTRAINT AR_CAT_CODE_FK FOREIGN KEY (CAT_CODE) REFERENCES CAT (CAT_CODE)
);
COMMENT ON TABLE ACT_REG IS '고양이 활동 등록';
COMMENT ON COLUMN ACT_REG.ACT_CODE IS '시퀀스';
COMMENT ON COLUMN ACT_REG.CAT_CODE IS '고양이 식별키';
COMMENT ON COLUMN ACT_REG.USER_CODE IS '이용자 식별키 ==집사';
COMMENT ON COLUMN ACT_REG.ACT_TYPE IS '활동 분류';
COMMENT ON COLUMN ACT_REG.CONTENT IS '내용';
COMMENT ON COLUMN ACT_REG.POST_DATE IS '업로드 일시';
COMMENT ON COLUMN ACT_REG.LATITUDE IS '위도';
COMMENT ON COLUMN ACT_REG.LONGITUDE IS '경도';
COMMENT ON COLUMN ACT_REG.ACT_LOCATION IS '위치명';
COMMENT ON COLUMN ACT_REG.ACT_DATE IS '고양이활동일자';


-- BBS_REG Table Create SQL
CREATE TABLE BBS_REG
( BBS_CODE     VARCHAR2(100)
, USER_CODE    VARCHAR2(100)
, TITLE        VARCHAR2(100)
, CONTENT      CLOB
, TYPE_CODE    VARCHAR2(100)
, HIT_COUNT    NUMBER DEFAULT 0
, POST_DATE    DATE
, CONSTRAINT BBS_CODE_PK PRIMARY KEY (BBS_CODE)
, CONSTRAINT BR_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
, CONSTRAINT BR_TYPE_CODE_FK FOREIGN KEY (TYPE_CODE) REFERENCES BBS_TYPE (BBS_TYPE_CODE)
);
COMMENT ON TABLE BBS_REG IS '자유게시판 게시물 등록';
COMMENT ON COLUMN BBS_REG.BBS_CODE IS '시리얼';
COMMENT ON COLUMN BBS_REG.USER_CODE IS '이용자 식별키';
COMMENT ON COLUMN BBS_REG.TITLE IS '제목';
COMMENT ON COLUMN BBS_REG.CONTENT IS '내용';
COMMENT ON COLUMN BBS_REG.TYPE_CODE IS '말머리 식별키';
COMMENT ON COLUMN BBS_REG.HIT_COUNT IS '조회수';
COMMENT ON COLUMN BBS_REG.POST_DATE IS '작성일';


-- ADT_REG Table Create SQL
CREATE TABLE ADT_REG
( ADT_CODE          VARCHAR2(100)
, ADT_PROC_CODE     VARCHAR2(100)
, CAT_NAME          VARCHAR2(100)
, CAT_ADDRESS       VARCHAR2(100)
, RSQ_DATE          DATE          
, CAT_SPECIES       VARCHAR2(100)
, CAT_AGE_CODE      VARCHAR2(100)
, CAT_AGE           VARCHAR2(100)
, CAT_SEX           VARCHAR2(100)
, ADT_TYPE          VARCHAR2(100)
, CAT_ECT1          VARCHAR2(1000)
, CAT_ECT2          VARCHAR2(1000)
, CAT_REP_IMG       VARCHAR2(100)
, USER_CODE         VARCHAR2(100)
, TEL               VARCHAR2(100)
, EMAIL             VARCHAR2(100)
, POST_DATE         DATE         DEFAULT SYSDATE
, ADT_REASON        VARCHAR2(1000)
, ADT_CAT_EXP       VARCHAR2(100)
, ADT_JOB           VARCHAR2(100)
, ADT_MARRIAGE      VARCHAR2(100)
, ADT_FAMILY_NUM    VARCHAR2(100)
, HIT_COUNT	    NUMBER DEFAULT 0
, CONSTRAINT ADT_CODE_PK PRIMARY KEY (ADT_CODE)
, CONSTRAINT AD_CAT_SEX_FK FOREIGN KEY (CAT_SEX) REFERENCES CAT_SEX (SEX_CODE)
, CONSTRAINT AD_CAT_SPECIES_FK FOREIGN KEY (CAT_SPECIES) REFERENCES CAT_TYPE (SPECIES_CODE)
, CONSTRAINT AD_CAT_AGE_CODE_FK FOREIGN KEY (CAT_AGE_CODE) REFERENCES ADT_CAT_AGE (CAT_AGE_CODE)
, CONSTRAINT AD_CAT_ADDRESS_FK FOREIGN KEY (CAT_ADDRESS) REFERENCES ADDRESS (ADDRESS_CODE)
, CONSTRAINT AD_ADT_PROC_CODE_FK FOREIGN KEY (ADT_PROC_CODE) REFERENCES ADT_PROCESS (ADT_PROC_CODE)
, CONSTRAINT AD_ADT_JOB_FK FOREIGN KEY (ADT_JOB) REFERENCES ADT_JOB (ADT_JOB)
, CONSTRAINT AD_ADT_FAMILY_NUM_FK FOREIGN KEY (ADT_FAMILY_NUM) REFERENCES ADT_FAMILY_NUM (ADT_FAMILY_NUM)
, CONSTRAINT AD_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
);
COMMENT ON TABLE ADT_REG IS '입양모집글 등록';
COMMENT ON COLUMN ADT_REG.ADT_CODE IS '시퀀스';
COMMENT ON COLUMN ADT_REG.ADT_PROC_CODE IS '입양상태 식별키';
COMMENT ON COLUMN ADT_REG.CAT_NAME IS '고양이이름';
COMMENT ON COLUMN ADT_REG.CAT_ADDRESS IS '지역 식별키';
COMMENT ON COLUMN ADT_REG.RSQ_DATE IS '구조일시';
COMMENT ON COLUMN ADT_REG.CAT_SPECIES IS '고양이 종류 식별키';
COMMENT ON COLUMN ADT_REG.CAT_AGE_CODE IS '성묘아기묘 식별키';
COMMENT ON COLUMN ADT_REG.CAT_AGE IS '고양이나이';
COMMENT ON COLUMN ADT_REG.CAT_SEX IS '고양이 성별 식별키';
COMMENT ON COLUMN ADT_REG.ADT_TYPE IS '긴급입양,분실의심,치료필요,장애';
COMMENT ON COLUMN ADT_REG.CAT_ECT1 IS '텍스트';
COMMENT ON COLUMN ADT_REG.CAT_ECT2 IS '텍스트';
COMMENT ON COLUMN ADT_REG.CAT_REP_IMG IS '대표이미지';
COMMENT ON COLUMN ADT_REG.USER_CODE IS '이용자식별키';
COMMENT ON COLUMN ADT_REG.TEL IS '연락처';
COMMENT ON COLUMN ADT_REG.EMAIL IS '이메일';
COMMENT ON COLUMN ADT_REG.POST_DATE IS '작성일시';
COMMENT ON COLUMN ADT_REG.ADT_REASON IS '텍스트';
COMMENT ON COLUMN ADT_REG.ADT_CAT_EXP IS '매칭질문';
COMMENT ON COLUMN ADT_REG.ADT_JOB IS '매칭질문';
COMMENT ON COLUMN ADT_REG.ADT_MARRIAGE IS '매칭질문';
COMMENT ON COLUMN ADT_REG.ADT_FAMILY_NUM IS '매칭질문';


-- CAPT Table Create SQL
CREATE TABLE CAPT
( CAPT_CODE    VARCHAR2(100)
, CAT_CODE1    VARCHAR2(100)
, CAT_CODE2    VARCHAR2(100)
, CONSTRAINT CAPT_CODE_PK PRIMARY KEY (CAPT_CODE)
, CONSTRAINT CP_CAt_CODE_FK FOREIGN KEY (CAT_CODE1) REFERENCES CAT (CAT_CODE)
, CONSTRAINT CP_CAT_CODE2_FK FOREIGN KEY (CAT_CODE2) REFERENCES CAT (CAT_CODE)
);
COMMENT ON TABLE CAPT IS '캡차 띄워줄 고양이 페어 리스트';
COMMENT ON COLUMN CAPT.CAPT_CODE IS '시퀀스';
COMMENT ON COLUMN CAPT.Cat_Code1 IS '고양이1 고유번호';
COMMENT ON COLUMN CAPT.Cat_Code2 IS '고양이2 고유번호';


-- MIS_CAT Table Create SQL
CREATE TABLE MIS_CAT
( MIS_CODE        VARCHAR2(100)
, CAT_NAME        VARCHAR2(100)
, MIS_LOCATION    VARCHAR2(100)
, MIS_DATE        DATE         
, CAT_SPECIES     VARCHAR2(100)
, CAT_AGE_CODE    VARCHAR2(100)
, CAT_AGE         VARCHAR2(100)
, CAT_SEX         VARCHAR2(100)
, CAT_ECT1        VARCHAR2(100)
, CAT_ECT2        VARCHAR2(100)
, USER_CODE       VARCHAR2(100)
, TEL             VARCHAR2(100)
, EMAIL           VARCHAR2(100)
, POST_DATE       DATE         DEFAULT SYSDATE
, CAT_REP_IMG     VARCHAR2(100)
, CONSTRAINT MIS_CODE_PK PRIMARY KEY (MIS_CODE)
, CONSTRAINT MC_CAT_SEX_FK FOREIGN KEY (CAT_SEX) REFERENCES CAT_SEX (SEX_CODE)
, CONSTRAINT MC_CAT_AGE_CODE_FK FOREIGN KEY (CAT_AGE_CODE) REFERENCES ADT_CAT_AGE (CAT_AGE_CODE)
, CONSTRAINT MC_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
, CONSTRAINT MC_MIS_LOCATION_FK FOREIGN KEY (MIS_LOCATION) REFERENCES ADDRESS (ADDRESS_CODE)
, CONSTRAINT MC_CAT_SPECIES_FK FOREIGN KEY (CAT_SPECIES) REFERENCES CAT_TYPE (SPECIES_CODE)
);
COMMENT ON TABLE MIS_CAT IS '실종 고양이';
COMMENT ON COLUMN MIS_CAT.MIS_CODE IS '시리얼';
COMMENT ON COLUMN MIS_CAT.CAT_NAME IS '고양이이름';
COMMENT ON COLUMN MIS_CAT.MIS_LOCATION IS '실종 지역';
COMMENT ON COLUMN MIS_CAT.MIS_DATE IS '실종일시';
COMMENT ON COLUMN MIS_CAT.CAT_SPECIES IS '고양이 종류 식별키';
COMMENT ON COLUMN MIS_CAT.CAT_AGE_CODE IS '성묘아기묘 식별키';
COMMENT ON COLUMN MIS_CAT.CAT_AGE IS '고양이나이';
COMMENT ON COLUMN MIS_CAT.CAT_SEX IS '고양이 성별 식별키';
COMMENT ON COLUMN MIS_CAT.CAT_ECT1 IS '텍스트';
COMMENT ON COLUMN MIS_CAT.CAT_ECT2 IS '텍스트';
COMMENT ON COLUMN MIS_CAT.USER_CODE IS '이용자 식별키';
COMMENT ON COLUMN MIS_CAT.TEL IS '연락처';
COMMENT ON COLUMN MIS_CAT.EMAIL IS '이메일';
COMMENT ON COLUMN MIS_CAT.POST_DATE IS '작성일시';
COMMENT ON COLUMN MIS_CAT.CAT_REP_IMG IS '대표이미지';

-- MERGE_REQUEST Table Create SQL
CREATE TABLE MERGE_REQUEST
( REQ_CODE     VARCHAR2(100)
, USER_CODE    VARCHAR2(100)
, CAT_CODE1    VARCHAR2(100)
, CAT_CODE2    VARCHAR2(100)
, REQ_DATE     DATE         DEFAULT SYSDATE
, CONSTRAINT REQ_CODE_PK PRIMARY KEY (REQ_CODE)
, CONSTRAINT MR_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
, CONSTRAINT MR_CAT_CODE1_FK FOREIGN KEY (CAT_CODE1) REFERENCES CAT (CAT_CODE)
, CONSTRAINT MR_CAT_CODE2_FK FOREIGN KEY (CAT_CODE2) REFERENCES CAT (CAT_CODE)
);
COMMENT ON TABLE MERGE_REQUEST IS '1';
COMMENT ON COLUMN MERGE_REQUEST.REQ_CODE IS '시퀀스';
COMMENT ON COLUMN MERGE_REQUEST.USER_CODE IS '신청자';
COMMENT ON COLUMN MERGE_REQUEST.CAT_CODE1 IS '신청자의 고양이';
COMMENT ON COLUMN MERGE_REQUEST.CAT_CODE2 IS '통합 대상 고양이';
COMMENT ON COLUMN MERGE_REQUEST.REQ_DATE IS '신청 일시';


-- BOARD_TYPE Table Create SQL
CREATE TABLE BOARD_TYPE
( BOARD_CODE    VARCHAR2(100)
, BOARD_NAME    VARCHAR2(100)
, CONSTRAINT BOARD_CODE_PK PRIMARY KEY (BOARD_CODE)
);
COMMENT ON TABLE BOARD_TYPE IS '범례(게시판종류 - 관리자유입양실종)';
COMMENT ON COLUMN BOARD_TYPE.BOARD_CODE IS '시퀀스';
COMMENT ON COLUMN BOARD_TYPE.BOARD_NAME IS '길냥이관리입양실종자유';



-- USER_ACT_TYPE Table Create SQL
CREATE TABLE USER_ACT_TYPE
( ACT_CODE    VARCHAR2(100)
, ACT_NAME    VARCHAR2(100)
, CONSTRAINT UA_ACT_CODE_PK PRIMARY KEY (ACT_CODE)
);
COMMENT ON TABLE USER_ACT_TYPE IS '범례(활동종류 - 글작성댓글작성갤러리사진추가입양신청)';
COMMENT ON COLUMN USER_ACT_TYPE.ACT_CODE IS '시퀀스';
COMMENT ON COLUMN USER_ACT_TYPE.ACT_NAME IS '글작성댓글작성갤러리사진추가입양신청';


-- GAL_REG Table Create SQL
CREATE TABLE GAL_REG
( GAL_IMG_CODE    VARCHAR2(100)
, CAT_CODE        VARCHAR2(100)
, GAL_DATE        DATE         DEFAULT SYSDATE
, IMG_FILE        VARCHAR2(100)
, CONSTRAINT GAL_IMG_CODE_PK PRIMARY KEY (GAL_IMG_CODE)
, CONSTRAINT GA_CAT_CODE_FK FOREIGN KEY (CAT_CODE) REFERENCES CAT (CAT_CODE)
);
COMMENT ON TABLE GAL_REG IS '길냥이관리 갤러리 등록(고양이 상세 페이지)';
COMMENT ON COLUMN GAL_REG.GAL_IMG_CODE IS '시퀀스';
COMMENT ON COLUMN GAL_REG.CAT_CODE IS '고양이 식별키';
COMMENT ON COLUMN GAL_REG.GAL_DATE IS '업로드 일시';
COMMENT ON COLUMN GAL_REG.IMG_FILE IS '이미지 파일명';


-- REPORT_TYPE Table Create SQL
CREATE TABLE REPORT_TYPE
( REPORT_TYPE_CODE    VARCHAR2(100)
, REPORT_NAME         VARCHAR2(100)
, CONSTRAINT RT_CODE_PK PRIMARY KEY (REPORT_TYPE_CODE)
);
COMMENT ON TABLE REPORT_TYPE IS '범례(신고유형 3개 - 부적절한정보고양이사망통합오류)';
COMMENT ON COLUMN REPORT_TYPE.REPORT_TYPE_CODE IS '시퀀스';
COMMENT ON COLUMN REPORT_TYPE.REPORT_NAME IS '부적절한정보고양이사망통합오류';

-- ADT_GENDER Table Create SQL
CREATE TABLE ADT_GENDER
( ADT_GENDER    VARCHAR2(100)
, ANSWER        VARCHAR2(100)
, CONSTRAINT ADT_GENDER_PK PRIMARY KEY (ADT_GENDER)
);
COMMENT ON TABLE ADT_GENDER IS '신청자 성별';
COMMENT ON COLUMN ADT_GENDER.ADT_GENDER IS '시퀀스';
COMMENT ON COLUMN ADT_GENDER.ANSWER IS '남, 여';


-- ADT_RESIDENCE Table Create SQL
CREATE TABLE ADT_RESIDENCE
( ADT_RESIDENCE    VARCHAR2(100)
, ANSWER           VARCHAR2(100)
, CONSTRAINT ADT_RESIDENCE_PK PRIMARY KEY (ADT_RESIDENCE)
);
COMMENT ON TABLE ADT_RESIDENCE IS '주거형태';
COMMENT ON COLUMN ADT_RESIDENCE.ADT_RESIDENCE IS '시퀀스';
COMMENT ON COLUMN ADT_RESIDENCE.ANSWER IS '아파트, 빌라, 단독주택 등';


-- ADT_CONSENT Table Create SQL
CREATE TABLE ADT_CONSENT
( ADT_CONSENT    VARCHAR2(100)
, ANSWER         VARCHAR2(100)
, CONSTRAINT ADT_CONSENT_PK PRIMARY KEY (ADT_CONSENT)
);
COMMENT ON TABLE ADT_CONSENT IS '가족 동의 여부';
COMMENT ON COLUMN ADT_CONSENT.ADT_CONSENT IS '시퀀스';
COMMENT ON COLUMN ADT_CONSENT.ANSWER IS '동의, 일부 동의, 반대';


-- ADT_PET_NUM Table Create SQL
CREATE TABLE ADT_PET_NUM
( ADT_PET_NUM    VARCHAR2(100)
, ANSWER         VARCHAR2(100)
, CONSTRAINT ADT_PET_NUM_PK PRIMARY KEY (ADT_PET_NUM)
);
COMMENT ON TABLE ADT_PET_NUM IS '반려동물 수';
COMMENT ON COLUMN ADT_PET_NUM.ADT_PET_NUM IS '시퀀스';
COMMENT ON COLUMN ADT_PET_NUM.ANSWER IS '0, 1, 2, 3 이상';


-- ADT_CARE_TIME Table Create SQL
CREATE TABLE ADT_CARE_TIME
( ADT_CARE_TIME    VARCHAR2(100)
, ANSWER           VARCHAR2(100)
, CONSTRAINT ADT_CARE_TIME_PK PRIMARY KEY (ADT_CARE_TIME)
);
COMMENT ON TABLE ADT_CARE_TIME IS '돌볼 수 있는 시간';
COMMENT ON COLUMN ADT_CARE_TIME.ADT_CARE_TIME IS '시퀀스';
COMMENT ON COLUMN ADT_CARE_TIME.ANSWER IS '1시간 이하, 1-3시간 등';


-- MERGE_ANSWER Table Create SQL
CREATE TABLE MERGE_ANSWER
( ANS_CODE     VARCHAR2(100)
, REQ_CODE     VARCHAR2(100)
, USER_CODE    VARCHAR2(100)
, RES_DATE     DATE         DEFAULT SYSDATE
, YESNO        VARCHAR2(100)
, CONSTRAINT MA_ANS_CODE_PK PRIMARY KEY (ANS_CODE)
, CONSTRAINT MA_YESNO_FK FOREIGN KEY (YESNO) REFERENCES RESPONSE_TYPE (YESNO)
, CONSTRAINT MA_REQ_CODE_FK FOREIGN KEY (REQ_CODE) REFERENCES MERGE_REQUEST (REQ_CODE)
);
COMMENT ON TABLE MERGE_ANSWER IS '2';
COMMENT ON COLUMN MERGE_ANSWER.ANS_CODE IS '시퀀스';
COMMENT ON COLUMN MERGE_ANSWER.REQ_CODE IS '신청 식별키';
COMMENT ON COLUMN MERGE_ANSWER.USER_CODE IS '응답자';
COMMENT ON COLUMN MERGE_ANSWER.RES_DATE IS '응답 일시';
COMMENT ON COLUMN MERGE_ANSWER.YESNO IS '응답 결과';


-- SCORE_ALLOT Table Create SQL
CREATE TABLE SCORE_ALLOT
( SCORE_CODE    VARCHAR2(100)
, BOARD_CODE    VARCHAR2(100)
, ACT_CODE      VARCHAR2(100)
, POINT         NUMBER       
, CONSTRAINT SA_SCORE_CODE_PK PRIMARY KEY (SCORE_CODE)
, CONSTRAINT SA_BOARD_CODE_FK FOREIGN KEY (BOARD_CODE) REFERENCES BOARD_TYPE (BOARD_CODE)
, CONSTRAINT SA_ACT_CODE_FK FOREIGN KEY (ACT_CODE) REFERENCES USER_ACT_TYPE (ACT_CODE)
);
COMMENT ON TABLE SCORE_ALLOT IS '활동 점수 배점';
COMMENT ON COLUMN SCORE_ALLOT.SCORE_CODE IS '시퀀스';
COMMENT ON COLUMN SCORE_ALLOT.BOARD_CODE IS '게시판 종류 식별키';
COMMENT ON COLUMN SCORE_ALLOT.ACT_CODE IS '활동 식별키';
COMMENT ON COLUMN SCORE_ALLOT.POINT IS '점수';


-- ADT_AGE Table Create SQL
CREATE TABLE ADT_AGE
( ADT_AGE    VARCHAR2(100)
, ANSWER     VARCHAR2(100)
, CONSTRAINT ADT_AGE_PK PRIMARY KEY (ADT_AGE)
);
COMMENT ON TABLE ADT_AGE IS '신청자 연령';
COMMENT ON COLUMN ADT_AGE.ADT_AGE IS '연령 식별키';
COMMENT ON COLUMN ADT_AGE.ANSWER IS '10,20,30,40,50,60대이상';


-- REPORT_LIST Table Create SQL
CREATE TABLE REPORT_LIST
( REPORT_CODE         VARCHAR2(100)
, REPORT_TYPE_CODE    VARCHAR2(100)
, REPORT_CONTENT      VARCHAR2(100)
, USER_CODE           VARCHAR2(100)
, REPORT_DATE         DATE         DEFAULT SYSDATE
, BOARD_CODE          VARCHAR2(100)
, POST_CODE           VARCHAR2(100)
, CONSTRAINT RL_REPORT_CODE_PK PRIMARY KEY (REPORT_CODE)
, CONSTRAINT RL_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
, CONSTRAINT RL_BOARD_CODE_FK FOREIGN KEY (BOARD_CODE) REFERENCES BOARD_TYPE (BOARD_CODE)
, CONSTRAINT RL_REPORT_TYPE_CODE_FK FOREIGN KEY (REPORT_TYPE_CODE) REFERENCES REPORT_TYPE (REPORT_TYPE_CODE)
);
COMMENT ON TABLE REPORT_LIST IS '신고 내역';
COMMENT ON COLUMN REPORT_LIST.REPORT_CODE IS '시퀀스';
COMMENT ON COLUMN REPORT_LIST.REPORT_TYPE_CODE IS '신고 유형';
COMMENT ON COLUMN REPORT_LIST.REPORT_CONTENT IS '신고 내용';
COMMENT ON COLUMN REPORT_LIST.USER_CODE IS '신고한 이용자 식별키';
COMMENT ON COLUMN REPORT_LIST.REPORT_DATE IS '신고일시';
COMMENT ON COLUMN REPORT_LIST.BOARD_CODE IS '게시판 종류';
COMMENT ON COLUMN REPORT_LIST.POST_CODE IS '게시물 번호';


-- FOLLOW Table Create SQL
CREATE TABLE FOLLOW
( FOLLOW_CODE    VARCHAR2(100)
, CAT_CODE       VARCHAR2(100)
, USER_CODE      VARCHAR2(100)
, FOLLOW_DATE    DATE         DEFAULT SYSDATE 
, CONSTRAINT FOLLOW_CODE_PK PRIMARY KEY (FOLLOW_CODE)
, CONSTRAINT FO_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
, CONSTRAINT FO_CAT_CODE_FK FOREIGN KEY (CAT_CODE) REFERENCES CAT (CAT_CODE)
);
COMMENT ON TABLE FOLLOW IS '팔로우 테이블';
COMMENT ON COLUMN FOLLOW.FOLLOW_CODE IS '시퀀스';
COMMENT ON COLUMN FOLLOW.CAT_CODE IS '팔로우 하는 고양이';
COMMENT ON COLUMN FOLLOW.USER_CODE IS '팔로우 하는 이용자';
COMMENT ON COLUMN FOLLOW.FOLLOW_DATE IS '팔로우한 날짜';


-- EMAIL_INQUIRY Table Create SQL
CREATE TABLE EMAIL_INQUIRY
( EMAIL_CODE        VARCHAR2(100)
, CONTENT      VARCHAR2(100)
, TITLE        VARCHAR2(100)
, USER_CODE    VARCHAR2(100)
, SEND_DATE    DATE         DEFAULT SYSDATE
, CONSTRAINT EMAIL_CODE_PK PRIMARY KEY (EMAIL_CODE)
, CONSTRAINT EI_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
);
COMMENT ON TABLE EMAIL_INQUIRY IS '이메일 문의';
COMMENT ON COLUMN EMAIL_INQUIRY.EMAIL_CODE IS '시퀀스';
COMMENT ON COLUMN EMAIL_INQUIRY.CONTENT IS '내용';
COMMENT ON COLUMN EMAIL_INQUIRY.TITLE IS '제목';
COMMENT ON COLUMN EMAIL_INQUIRY.User_Code IS '이용자 식별키';
COMMENT ON COLUMN EMAIL_INQUIRY.SEND_DATE IS '전송일시';


-- BBS_CMT Table Create SQL
CREATE TABLE BBS_CMT
( BBS_CMT_CODE    VARCHAR2(100)
, BBS_CODE        VARCHAR2(100)
, USER_CODE       VARCHAR2(100)
, CONTENT         VARCHAR2(100)
, BBS_CMT_DATE    DATE         DEFAULT SYSDATE
, CONSTRAINT BBS_CMT_CODE_PK PRIMARY KEY (BBS_CMT_CODE)
, CONSTRAINT BC_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
, CONSTRAINT BC_BBS_CODE_FK FOREIGN KEY (BBS_CODE) REFERENCES BBS_REG (BBS_CODE)
);
COMMENT ON TABLE BBS_CMT IS '자유게시판 댓글 등록';
COMMENT ON COLUMN BBS_CMT.BBS_CMT_CODE IS '시퀀스';
COMMENT ON COLUMN BBS_CMT.BBS_CODE IS '게시물 식별키';
COMMENT ON COLUMN BBS_CMT.USER_CODE IS '이용자 식별키';
COMMENT ON COLUMN BBS_CMT.CONTENT IS '내용';
COMMENT ON COLUMN BBS_CMT.BBS_CMT_DATE IS '작성일시';

-- BBS_LIKE Table Create SQL
CREATE TABLE BBS_LIKE
( LIKE_CODE    VARCHAR2(100)
, BBS_CODE     VARCHAR2(100)
, USER_CODE    VARCHAR2(100)
, CONSTRAINT BL_LIKE_CODE_PK PRIMARY KEY (LIKE_CODE)
, CONSTRAINT BL_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
, CONSTRAINT BL_BBS_CODE_FK FOREIGN KEY (BBS_CODE) REFERENCES BBS_REG (BBS_CODE)
);
COMMENT ON TABLE BBS_LIKE IS '자유게시판 추천';
COMMENT ON COLUMN BBS_LIKE.LIKE_CODE IS '시퀀스';
COMMENT ON COLUMN BBS_LIKE.BBS_CODE IS '게시물 식별키';
COMMENT ON COLUMN BBS_LIKE.USER_CODE IS '이용자 식별키';


-- GAL_LIKE Table Create SQL
CREATE TABLE GAL_LIKE
( GAL_LIKE_CODE    VARCHAR2(100)
, GAL_IMG_CODE     VARCHAR2(100)
, USER_CODE        VARCHAR2(100)
, GAL_LIKE_DATE    DATE         DEFAULT SYSDATE
, CONSTRAINT GL_LIKE_CODE_PK PRIMARY KEY (GAL_LIKE_CODE)
, CONSTRAINT GL_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
, CONSTRAINT GL_GAL_IMG_CODE_FK FOREIGN KEY (GAL_IMG_CODE) REFERENCES GAL_REG (GAL_IMG_CODE)
);
COMMENT ON TABLE GAL_LIKE IS '길냥이 관리 갤러리 좋아요';
COMMENT ON COLUMN GAL_LIKE.GAL_LIKE_CODE IS '시퀀스';
COMMENT ON COLUMN GAL_LIKE.GAL_IMG_CODE IS '갤러리 이미지 식별키';
COMMENT ON COLUMN GAL_LIKE.USER_CODE IS '좋아요를 클릭한 사람';
COMMENT ON COLUMN GAL_LIKE.GAL_LIKE_DATE IS '좋아요 일시';


-- MERGE_VOTE Table Create SQL
CREATE TABLE MERGE_VOTE
( VOTE_CODE    VARCHAR2(100)
, ANS_CODE     VARCHAR2(100)
, USER_CODE    VARCHAR2(100)
, YESNO        VARCHAR2(100)
, VOTE_DATE    DATE         DEFAULT SYSDATE
, CONSTRAINT MV_VOTE_CODE_PK PRIMARY KEY (VOTE_CODE, USER_CODE)
, CONSTRAINT MV_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
, CONSTRAINT MV_YESNO_FK FOREIGN KEY (YESNO) REFERENCES RESPONSE_TYPE (YESNO)
, CONSTRAINT MV_ANS_CODE_FK FOREIGN KEY (ANS_CODE) REFERENCES MERGE_ANSWER (ANS_CODE)
);
COMMENT ON TABLE MERGE_VOTE IS '3';
COMMENT ON COLUMN MERGE_VOTE.VOTE_CODE IS '시퀀스';
COMMENT ON COLUMN MERGE_VOTE.ANS_CODE IS '응답 식별키';
COMMENT ON COLUMN MERGE_VOTE.USER_CODE IS '투표한 이용자';
COMMENT ON COLUMN MERGE_VOTE.YESNO IS '찬성반대';
COMMENT ON COLUMN MERGE_VOTE.VOTE_DATE IS '투표 일시';


-- Send_Messages Table Create SQL
CREATE TABLE SEND_MESSAGES
( MES_CODE         VARCHAR2(100)
, USER_CODE1       VARCHAR2(100)
, USER_CODE2       VARCHAR2(100)
, MES_TITLE        VARCHAR2(100)
, MES_CONTENT      VARCHAR2(100)
, SEND_DATE        DATE         DEFAULT SYSDATE
, READ_DATE        DATE             NULL 
, SEND_DEL_DATE    DATE             NULL 
, READ_DEL_DATE    DATE             NULL 
, CONSTRAINT SM_MES_CODE_PK PRIMARY KEY (MES_CODE)
, CONSTRAINT MS_USER_CODE1_FK FOREIGN KEY (USER_CODE1) REFERENCES USER_REG (USER_CODE)
, CONSTRAINT MS_USER_CODE2_FK FOREIGN KEY (USER_CODE2) REFERENCES USER_REG (USER_CODE)
);
COMMENT ON TABLE Send_Messages IS '쪽지';
COMMENT ON COLUMN Send_Messages.MES_CODE IS '시퀀스';
COMMENT ON COLUMN Send_Messages.USER_CODE1 IS '이용자 식별키';
COMMENT ON COLUMN Send_Messages.USER_CODE2 IS '이용자 식별키';
COMMENT ON COLUMN Send_Messages.MES_TITLE IS '제목';
COMMENT ON COLUMN Send_Messages.MES_CONTENT IS '내용';
COMMENT ON COLUMN Send_Messages.SEND_DATE IS '전송일시';
COMMENT ON COLUMN Send_Messages.READ_DATE IS '쪽지 확인 여부 날짜';
COMMENT ON COLUMN Send_Messages.SEND_DEL_DATE IS '보낸사람 삭제 날짜';
COMMENT ON COLUMN Send_Messages.READ_DEL_DATE IS '받은사람 삭제 날짜';


-- CAPT_FINISH Table Create SQL
CREATE TABLE CAPT_FINISH
( CAPT_CODE      VARCHAR2(100)
, FINISH_DATE    DATE         DEFAULT SYSDATE
, CONSTRAINT CF_CAPT_CODE_PK PRIMARY KEY (CAPT_CODE)
, CONSTRAINT CF_CAPT_CODE_FK FOREIGN KEY (CAPT_CODE) REFERENCES CAPT (CAPT_CODE)
);
COMMENT ON TABLE CAPT_FINISH IS '완료된 캡차';
COMMENT ON COLUMN CAPT_FINISH.CAPT_CODE IS '시퀀스';
COMMENT ON COLUMN CAPT_FINISH.FINISH_DATE IS '완료 날짜';

-- ADT_APPLY Table Create SQL
CREATE TABLE ADT_APPLY
( ADT_APP_CODE          VARCHAR2(100)
, ADT_CODE              VARCHAR2(100)
, USER_CODE             VARCHAR2(100)
, ADT_GENDER            VARCHAR2(100)
, ADT_AGE               VARCHAR2(100)
, ADT_RESIDENCE         VARCHAR2(100)
, ADT_CAT_EXP           VARCHAR2(100)
, ADT_JOB               VARCHAR2(100)
, ADT_MARRIAGE          VARCHAR2(100)
, ADT_FAMILY_NUM        VARCHAR2(100)
, ADT_FAMILY_CONSENT    VARCHAR2(100)
, ADT_ALLOW             VARCHAR2(100)
, ADT_PET_NUM           VARCHAR2(100)
, ADT_PET_TEXT          VARCHAR2(100)
, ADT_CARE_TIME         VARCHAR2(100)
, ADT_ALLERGY           VARCHAR2(100)
, ADT_ABANDON           VARCHAR2(100)
, ADT_ADOPTION          VARCHAR2(100)
, A1                    VARCHAR2(1000)
, A2                    VARCHAR2(1000)
, A3                    VARCHAR2(1000)
, APPLY_DATE		DATE	DEFAULT SYSDATE
, CONSTRAINT ADT_APP_CODE_PK PRIMARY KEY (ADT_APP_CODE)
, CONSTRAINT AA_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
, CONSTRAINT AA_ADT_GENDER_FK FOREIGN KEY (ADT_GENDER) REFERENCES ADT_GENDER (ADT_GENDER)
, CONSTRAINT AA_ADT_RESIDENCE_FK FOREIGN KEY (ADT_RESIDENCE) REFERENCES ADT_RESIDENCE (ADT_RESIDENCE)
, CONSTRAINT AA_ADT_FAMILY_FK FOREIGN KEY (ADT_FAMILY_CONSENT) REFERENCES ADT_CONSENT (ADT_CONSENT)
, CONSTRAINT AA_ADT_PET_NUM_FK FOREIGN KEY (ADT_PET_NUM) REFERENCES ADT_PET_NUM (ADT_PET_NUM)
, CONSTRAINT AA_ADT_CARE_TIME_FK FOREIGN KEY (ADT_CARE_TIME) REFERENCES ADT_CARE_TIME (ADT_CARE_TIME)
, CONSTRAINT AA_ADT_FAMILY_NUM_FK FOREIGN KEY (ADT_FAMILY_NUM) REFERENCES ADT_FAMILY_NUM (ADT_FAMILY_NUM)
, CONSTRAINT AA_ADT_JOB_FK FOREIGN KEY (ADT_JOB) REFERENCES ADT_JOB (ADT_JOB)
, CONSTRAINT AA_ADT_AGE_FK FOREIGN KEY (ADT_AGE) REFERENCES ADT_AGE (ADT_AGE)
, CONSTRAINT AA_ADT_CODE_FK FOREIGN KEY (ADT_CODE) REFERENCES ADT_REG (ADT_CODE)
, CONSTRAINT AA_ADT_ABANDON_FK FOREIGN KEY (ADT_ABANDON) REFERENCES RESPONSE_TYPE (YESNO)
, CONSTRAINT AA_ADT_ADOPTION_FK FOREIGN KEY (ADT_ADOPTION) REFERENCES RESPONSE_TYPE (YESNO)
, CONSTRAINT AA_ADT_ALLOW_FK FOREIGN KEY (ADT_ALLOW) REFERENCES RESPONSE_TYPE (YESNO)
, CONSTRAINT AA_ADT_MARRIAGE_FK FOREIGN KEY (ADT_MARRIAGE) REFERENCES RESPONSE_TYPE (YESNO)
, CONSTRAINT AA_ADT_CAT_EXP_FK FOREIGN KEY (ADT_CAT_EXP) REFERENCES RESPONSE_TYPE (YESNO)
, CONSTRAINT AA_ADT_ALLERGY_FK FOREIGN KEY (ADT_ALLERGY) REFERENCES RESPONSE_TYPE (YESNO)
);
COMMENT ON TABLE ADT_APPLY IS '입양 신청글';
COMMENT ON COLUMN ADT_APPLY.ADT_APP_CODE IS '입양 신청글 식별키';
COMMENT ON COLUMN ADT_APPLY.ADT_CODE IS '입양 모집글 식별키';
COMMENT ON COLUMN ADT_APPLY.USER_CODE IS '이용자식별키';
COMMENT ON COLUMN ADT_APPLY.ADT_GENDER IS '신청자 성별';
COMMENT ON COLUMN ADT_APPLY.ADT_AGE IS '신청자 연령';
COMMENT ON COLUMN ADT_APPLY.ADT_RESIDENCE IS '신청자 주거 형태';
COMMENT ON COLUMN ADT_APPLY.ADT_CAT_EXP IS '매칭질문';
COMMENT ON COLUMN ADT_APPLY.ADT_JOB IS '매칭질문';
COMMENT ON COLUMN ADT_APPLY.ADT_MARRIAGE IS '매칭질문';
COMMENT ON COLUMN ADT_APPLY.ADT_FAMILY_NUM IS '매칭질문';
COMMENT ON COLUMN ADT_APPLY.ADT_FAMILY_CONSENT IS '가족구성원 동의 여부';
COMMENT ON COLUMN ADT_APPLY.ADT_ALLOW IS '거주 건물 반려동물 가능 여부';
COMMENT ON COLUMN ADT_APPLY.ADT_PET_NUM IS '반려동물 수';
COMMENT ON COLUMN ADT_APPLY.ADT_PET_TEXT IS '텍스트(종류성별나이등)';
COMMENT ON COLUMN ADT_APPLY.ADT_CARE_TIME IS '돌볼 수 있는 시간';
COMMENT ON COLUMN ADT_APPLY.ADT_ALLERGY IS '알러지 유무';
COMMENT ON COLUMN ADT_APPLY.ADT_ABANDON IS '파양 경험';
COMMENT ON COLUMN ADT_APPLY.ADT_ADOPTION IS '입양 경험';
COMMENT ON COLUMN ADT_APPLY.A1 IS '텍스트';
COMMENT ON COLUMN ADT_APPLY.A2 IS '텍스트';
COMMENT ON COLUMN ADT_APPLY.A3 IS '텍스트';


-- ADT_TYPE Table Create SQL
CREATE TABLE ADT_TYPE
( ADT_TYPE_CODE    VARCHAR2(100)
, ADT_TYPE         VARCHAR2(100)
, CONSTRAINT ADT_TYPE_CODE_PK PRIMARY KEY (ADT_TYPE_CODE)
);
COMMENT ON TABLE ADT_TYPE IS '입양 분류 리스트';
COMMENT ON COLUMN ADT_TYPE.ADT_TYPE_CODE IS '시퀀스';
COMMENT ON COLUMN ADT_TYPE.ADT_TYPE IS '긴급구조, 분실의심 등';


-- ACT_LIKE Table Create SQL
CREATE TABLE ACT_LIKE
( ACT_LIKE_CODE    VARCHAR2(100)
, ACT_CODE         VARCHAR2(100)
, USER_CODE        VARCHAR2(100)
, ACT_LIKE_DATE    DATE         DEFAULT SYSDATE
, CONSTRAINT AC_LIKE_CODE_PK PRIMARY KEY (ACT_LIKE_CODE)
, CONSTRAINT AC_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
, CONSTRAINT AC_ACT_CODE_FK FOREIGN KEY (ACT_CODE) REFERENCES ACT_REG (ACT_CODE)
);
COMMENT ON TABLE ACT_LIKE IS '활동 좋아요';
COMMENT ON COLUMN ACT_LIKE.ACT_LIKE_CODE IS '시퀀스';
COMMENT ON COLUMN ACT_LIKE.ACT_CODE IS '활동 식별키';
COMMENT ON COLUMN ACT_LIKE.USER_CODE IS '이용자 식별키';
COMMENT ON COLUMN ACT_LIKE.ACT_LIKE_DATE IS '좋아요 일시';

-- ACT_CMT Table Create SQL
CREATE TABLE ACT_CMT
( ACT_CMT_CODE    VARCHAR2(100)
, ACT_CODE        VARCHAR2(100)
, USER_CODE       VARCHAR2(100)
, CONTENT         VARCHAR2(100)
, ACT_CMT_DATE    DATE         DEFAULT SYSDATE
, CONSTRAINT AC_CMT_CODE_PK PRIMARY KEY (ACT_CMT_CODE)
, CONSTRAINT ACC_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
, CONSTRAINT ACC_ACT_CODE_FK FOREIGN KEY (ACT_CODE) REFERENCES ACT_REG (ACT_CODE)
);
COMMENT ON TABLE ACT_CMT IS '활동 댓글 등록';
COMMENT ON COLUMN ACT_CMT.ACT_CMT_CODE IS '시퀀스';
COMMENT ON COLUMN ACT_CMT.ACT_CODE IS '고양이 활동 등록 식별키';
COMMENT ON COLUMN ACT_CMT.USER_CODE IS '이용자 식별키';
COMMENT ON COLUMN ACT_CMT.CONTENT IS '내용';
COMMENT ON COLUMN ACT_CMT.ACT_CMT_DATE IS '작성일시';


-- MIS_IMG Table Create SQL
CREATE TABLE MIS_IMG
( MIS_IMG_CODE    VARCHAR2(100)
, MIS_CODE        VARCHAR2(100)
, IMG_FILE        VARCHAR2(100)
, CONSTRAINT MI_CODE_PK PRIMARY KEY (MIS_IMG_CODE)
, CONSTRAINT MI_MIS_CODE_FK FOREIGN KEY (MIS_CODE) REFERENCES MIS_CAT (MIS_CODE)
);
COMMENT ON TABLE MIS_IMG IS '실종 게시물 이미지';
COMMENT ON COLUMN MIS_IMG.MIS_IMG_CODE IS '시리얼';
COMMENT ON COLUMN MIS_IMG.MIS_CODE IS '실종 게시물 식별키';
COMMENT ON COLUMN MIS_IMG.IMG_FILE IS '이미지 파일명';


-- ADT_CMT Table Create SQL
CREATE TABLE ADT_CMT
( ADT_CMT_CODE    VARCHAR2(100)
, ADT_CODE        VARCHAR2(100)
, USER_CODE       VARCHAR2(100)
, CONTENT         VARCHAR2(1000)
, ADT_CMT_DATE    DATE         DEFAULT SYSDATE
, CONSTRAINT ADC_CODE_PK PRIMARY KEY (ADT_CMT_CODE)
, CONSTRAINT ADC_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
);
COMMENT ON TABLE ADT_CMT IS '입양 모집 댓글 리스트';
COMMENT ON COLUMN ADT_CMT.ADT_CMT_CODE IS '시퀀스';
COMMENT ON COLUMN ADT_CMT.ADT_CODE IS '입양모집글 식별키';
COMMENT ON COLUMN ADT_CMT.USER_CODE IS '이용자 식별키';
COMMENT ON COLUMN ADT_CMT.CONTENT IS '내용';
COMMENT ON COLUMN ADT_CMT.ADT_CMT_DATE IS '작성일시';


-- CAPT_LOG Table Create SQL
CREATE TABLE CAPT_LOG
( CAPT_LOG_CODE    VARCHAR2(100)
, CAPT_CODE        VARCHAR2(100)
, USER_CODE        VARCHAR(100)
, RES_CODE         VARCHAR(100)
, RES_DATE         DATE        DEFAULT SYSDATE
, CONSTRAINT CL_CODE_PK PRIMARY KEY (CAPT_LOG_CODE)
, CONSTRAINT CL_CAPT_CODE_FK FOREIGN KEY (CAPT_CODE) REFERENCES CAPT (CAPT_CODE)
, CONSTRAINT CL_USER_CODE_FK FOREIGN KEY (User_Code) REFERENCES USER_REG (USER_CODE)
, CONSTRAINT CL_RES_CODE_FK FOREIGN KEY (RES_CODE) REFERENCES RESPONSE_TYPE (YESNO)
);
COMMENT ON TABLE CAPT_LOG IS '각 캡차에 대한 사용자의 응답이 쌓이는 테이블';
COMMENT ON COLUMN CAPT_LOG.CAPT_LOG_CODE IS '캡차응답 식별키';
COMMENT ON COLUMN CAPT_LOG.CAPT_CODE IS '시퀀스';
COMMENT ON COLUMN CAPT_LOG.User_Code IS '이용자 식별키';
COMMENT ON COLUMN CAPT_LOG.RES_CODE IS '응답 식별키';
COMMENT ON COLUMN CAPT_LOG.RES_DATE IS '응답 일시';



-- MERGE_RESULT Table Create SQL
CREATE TABLE MERGE_RESULT
( MERGE_CODE    VARCHAR2(100)
, REQ_CODE      VARCHAR2(100)
, YESNO         VARCHAR2(100)
, CONSTRAINT MS_CODE_PK PRIMARY KEY (MERGE_CODE)
, CONSTRAINT MS_REQ_CODE_FK FOREIGN KEY (REQ_CODE) REFERENCES MERGE_REQUEST (REQ_CODE)
, CONSTRAINT MS_YESNO_FK FOREIGN KEY (YESNO) REFERENCES RESPONSE_TYPE (YESNO)
);
COMMENT ON TABLE MERGE_RESULT IS '4';
COMMENT ON COLUMN MERGE_RESULT.MERGE_CODE IS '시퀀스';
COMMENT ON COLUMN MERGE_RESULT.REQ_CODE IS '신청 식별키';
COMMENT ON COLUMN MERGE_RESULT.YESNO IS '통합 결과 유형 식별키';


-- SCORE_LOG Table Create SQL
CREATE TABLE SCORE_LOG
( SCORE_LOG_CODE    VARCHAR2(100)
, USER_CODE         VARCHAR2(100)
, SCORE_CODE        VARCHAR2(100)
, LOG_DATE          DATE         DEFAULT SYSDATE
, CONSTRAINT SL_CODE_PK PRIMARY KEY (SCORE_LOG_CODE)
, CONSTRAINT SL_SCORE_CODE_FK FOREIGN KEY (SCORE_CODE) REFERENCES SCORE_ALLOT (SCORE_CODE)
, CONSTRAINT SL_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
);
COMMENT ON TABLE SCORE_LOG IS '활동점수 로그';
COMMENT ON COLUMN SCORE_LOG.SCORE_LOG_CODE IS '시퀀스';
COMMENT ON COLUMN SCORE_LOG.USER_CODE IS '이용자 식별키';
COMMENT ON COLUMN SCORE_LOG.SCORE_CODE IS '활동점수 배점 식별키';
COMMENT ON COLUMN SCORE_LOG.LOG_DATE IS '로그 날짜';



-- QNS_LIST Table Create SQL
CREATE TABLE QNS_LIST
( QNS_CODE    VARCHAR2(100)
, ADT_CODE    VARCHAR2(100)
, Q1          VARCHAR2(300)
, Q2          VARCHAR2(300)
, Q3          VARCHAR2(300)
, CONSTRAINT QL_CODE_PK PRIMARY KEY (QNS_CODE)
, CONSTRAINT QL_ADT_CODE_FK FOREIGN KEY (ADT_CODE) REFERENCES ADT_REG (ADT_CODE)
);
COMMENT ON TABLE QNS_LIST IS '입양 서술 질문';
COMMENT ON COLUMN QNS_LIST.QNS_CODE IS '시퀀스';
COMMENT ON COLUMN QNS_LIST.ADT_CODE IS '입양 모집글 식별키';
COMMENT ON COLUMN QNS_LIST.Q1 IS '서술질문 1';
COMMENT ON COLUMN QNS_LIST.Q2 IS '서술질문 2';
COMMENT ON COLUMN QNS_LIST.Q3 IS '서술질문 3';


-- BBS_IMG Table Create SQL
CREATE TABLE BBS_IMG
( IMG_CODE    VARCHAR2(100)
, BBS_CODE    VARCHAR2(100)
, IMG_FILE    VARCHAR2(100)
, CONSTRAINT BI_CODE_PK PRIMARY KEY (IMG_CODE)
, CONSTRAINT BI_BBS_CODE_FK FOREIGN KEY (BBS_CODE) REFERENCES BBS_REG (BBS_CODE)
);
COMMENT ON TABLE BBS_IMG IS '자유게시판 이미지';
COMMENT ON COLUMN BBS_IMG.IMG_CODE IS '자유 이미지 식별키';
COMMENT ON COLUMN BBS_IMG.BBS_CODE IS '자유 게시물 식별키';
COMMENT ON COLUMN BBS_IMG.IMG_FILE IS '이미지 파일명';


-- MIS_CMT Table Create SQL
CREATE TABLE MIS_CMT
( MIS_CMT_CODE    VARCHAR2(100)
, MIS_CODE        VARCHAR2(100)
, USER_CODE       VARCHAR2(100)
, CONTENT         VARCHAR2(300)
, MIS_CMT_DATE    DATE         
, CONSTRAINT MCT_CODE_PK PRIMARY KEY (MIS_CMT_CODE)
, CONSTRAINT MCT_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
, CONSTRAINT MCT_MIS_CODE_FK FOREIGN KEY (MIS_CODE) REFERENCES MIS_CAT (MIS_CODE)
);
COMMENT ON TABLE MIS_CMT IS '실종 댓글 리스트';
COMMENT ON COLUMN MIS_CMT.MIS_CMT_CODE IS '댓글 식별키';
COMMENT ON COLUMN MIS_CMT.MIS_CODE IS '실종 게시물 식별키';
COMMENT ON COLUMN MIS_CMT.USER_CODE IS '댓글 작성자';
COMMENT ON COLUMN MIS_CMT.CONTENT IS '내용';
COMMENT ON COLUMN MIS_CMT.MIS_CMT_DATE IS '작성일시';


-- BOOKMARK Table Create SQL
CREATE TABLE BOOKMARK
( BOOKMARK_ID      VARCHAR2(100)
, CAT_CODE         VARCHAR2(100)
, USER_CODE        VARCHAR2(100)
, BOOKMARK_DATE    DATE        DEFAULT SYSDATE
, CONSTRAINT BOOKMARK_ID_PK PRIMARY KEY (BOOKMARK_ID)
, CONSTRAINT BM_CAT_CODE_FK FOREIGN KEY (CAT_CODE) REFERENCES CAT (CAT_CODE)
, CONSTRAINT BM_USER_CODE_FK FOREIGN KEY (USER_CODE) REFERENCES USER_REG (USER_CODE)
);
COMMENT ON TABLE BOOKMARK IS '즐겨찾기';
COMMENT ON COLUMN BOOKMARK.BOOKMARK_ID IS '즐겨찾기 식별키';
COMMENT ON COLUMN BOOKMARK.Cat_Code IS '고양이 식별키';
COMMENT ON COLUMN BOOKMARK.USER_CODE IS '이용자식별키';
COMMENT ON COLUMN BOOKMARK.BOOKMARK_DATE IS '즐겨찾기 일시';


-- ADT_IMG Table Create SQL
CREATE TABLE ADT_IMG
( ADT_IMG_CODE    VARCHAR2(100)
, ADT_CODE        VARCHAR2(100)
, IMG_NAME        VARCHAR2(100)
, CONSTRAINT AI_IMG_CODE_PK PRIMARY KEY (ADT_IMG_CODE)
, CONSTRAINT AI_ADT_CODE_FK FOREIGN KEY (ADT_CODE) REFERENCES ADT_REG (ADT_CODE)
);
COMMENT ON TABLE ADT_IMG IS '입양이미지';
COMMENT ON COLUMN ADT_IMG.ADT_IMG_CODE IS '입양이미지 식별키';
COMMENT ON COLUMN ADT_IMG.ADT_CODE IS '입양모집글식별키';
COMMENT ON COLUMN ADT_IMG.IMG_NAME IS '이미지파일명';

--시퀀스 생성 구문-----------------------------------------------------------------------------------------------------------

CREATE SEQUENCE ACT_REG_SEQ
START WITH 31
NOCACHE;

-- ADT_CODE_SEQ 
CREATE SEQUENCE ADT_CODE_SEQ
START WITH 1
INCREMENT BY 1
MAXVALUE 100000
MINVALUE 1
NOCACHE;

CREATE SEQUENCE ADT_APP_CODE_SEQ
START WITH 11
NOCACHE;

CREATE SEQUENCE BBS_REG_SEQ
START WITH 62
NOCACHE;


CREATE SEQUENCE BBS_CMT_SEQ
START WITH 51
NOCACHE;

CREATE SEQUENCE CAT_CODE_SEQ
START WITH 42
NOCACHE;

CREATE SEQUENCE FOLLOW_SEQ
START WITH 11
NOCACHE;

CREATE SEQUENCE GAL_IMG_SEQ
NOCACHE;

CREATE SEQUENCE REPORT_LIST_SEQ
NOCACHE;

CREATE SEQUENCE USER_CODE_SEQ
START WITH 51
NOCACHE;

CREATE SEQUENCE MES_CODE_SEQ
NOCACHE;

--뷰 생성 구문-----------------------------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW CAT_INFO
AS
SELECT 
    CAT.CAT_CODE AS CAT_CODE
    , CAT.CAT_NAME AS CAT_NAME
    , CT.SPECIES AS CAT_SPECIES
    , CS.SEX AS CAT_SEX
    , (ADR.SI|| ' ' || ADR.GU || ' ' || ADR.DONG) AS CAT_ADDRESS
    , CAT.CAT_DATE AS CAT_DATE
    , CAT.CAT_REP_IMG AS CAT_IMG
    , F.COUNT AS FOLLOW
    , CAT.CAT_ECT1 AS ETC
    , CAT.CAT_ECT2 AS HEALTH 
FROM CAT
LEFT JOIN CAT_TYPE CT ON CT.SPECIES_CODE = CAT.CAT_SPECIES
LEFT JOIN (SELECT CAT_CODE, COUNT(*) AS COUNT FROM FOLLOW GROUP BY CAT_CODE) F ON F.CAT_CODE = CAT.CAT_CODE
LEFT JOIN CAT_SEX CS ON CS.SEX_CODE = CAT.CAT_SEX
LEFT JOIN ADDRESS ADR ON ADR.ADDRESS_CODE = CAT.CAT_ADDRESS;


-- [입양] 리스트에서 키워드 검색을 위한 뷰(VIEW) 생성
CREATE OR REPLACE VIEW ADT_REG_VIEW
AS 
SELECT ROW_NUMBER() OVER(ORDER BY POST_DATE DESC, ADT_CODE ASC) AS NUM
     , A.ADT_CODE AS ADT_CODE
     , A.CAT_NAME AS CAT_NAME
     , U.NICKNAME AS USER_NICKNAME
     , A.RSQ_DATE AS RSQ_DATE
     , CT.SPECIES AS CAT_TYPE
     , CS.SEX AS CAT_SEX
     , A.CAT_AGE AS CAT_AGE
     , AD.GU AS GU
     , AD.DONG AS DONG
     , AD.SI || ' ' || AD.GU || ' ' || AD.DONG AS CAT_ADDRESS
     , CA.CAT_AGE_TYPE AS CAT_AGE_TYPE
     , AP.ADT_PROC AS ADT_PROC
     , AT.ADT_TYPE AS ADT_TYPE
     , A.HIT_COUNT AS HITCOUNT
     , TO_CHAR(A.POST_DATE, 'YYYY-MM-DD') AS POST_DATE
     , A.CAT_REP_IMG AS CAT_IMAGE
     , A.CAT_ECT1 AS CAT_ECT1
     , A.CAT_ECT2 AS CAT_ECT2
     , U.ID AS USER_ID
     , U.USER_NAME AS USER_NAME
     , U.TEL AS USER_TEL
     , U.EMAIL AS USER_EMAIL
     , A.HIT_COUNT AS HIT_COUNT
FROM ADT_REG A 
LEFT JOIN USER_REG U
ON A.USER_CODE = U.USER_CODE
LEFT JOIN CAT_TYPE CT
ON A.CAT_SPECIES = CT.SPECIES_CODE
LEFT JOIN CAT_SEX CS
ON A.CAT_SEX = CS.SEX_CODE
LEFT JOIN ADDRESS AD
ON A.CAT_ADDRESS = AD.ADDRESS_CODE
LEFT JOIN ADT_CAT_AGE CA
ON A.CAT_AGE_CODE = CA.CAT_AGE_CODE
LEFT JOIN ADT_PROCESS AP
ON A.ADT_PROC_CODE = AP.ADT_PROC_CODE
LEFT JOIN ADT_TYPE AT
ON A.ADT_TYPE = AT.ADT_TYPE_CODE
ORDER BY POST_DATE;

COMMIT;